/* priority lock (plock) test driver
 *
 * compile with:             gcc -Wall plock.c main.c -pthread
 * run memcheck tests with:  valgrind --tool=memcheck ./a.out
 * run helgrind tests with:  valgrind --tool=helgrind ./a.out
 */

#include "plock.h"

plock_t *priority_lock;      /* global lock shared among worker threads */

void *worker( void *args ){
  int thread_id = *( (int *) args );
  int priority  = *( ( (int *) args ) + 1 );
  plock_enter( priority_lock, priority );
  printf( "thread %d starts with priority %d\n", thread_id, priority );
  sleep( 2 );
  printf( "thread %d ends\n", thread_id );
  plock_exit( priority_lock );
  pthread_exit( NULL );
}

int main( int argc, char **argv ){
  pthread_t threads[20];
  int i;
  int rc;
  int args[20][2] =            /* pairs of thread id and priority */
    { {  0,  16 }, {  1,  15 }, {  2,  15 }, {  3,  24 }, {  4,  1000 },
      {  5,  30 }, {  6, 66 }, {  7,  34 }, {  8,  777 }, {  9,  99 },
      { 10,  20 }, { 11,  7 }, { 12,  10 }, { 13,  2 }, { 14,  6 },
      { 15,  10 }, { 16,  8 }, { 17,  9 }, { 18,  0 }, { 19,  23 }  }; 

  priority_lock = plock_create();

  for( i = 0; i < 20 ; i++ ){
    rc = pthread_create( &threads[i], NULL, &worker, (void *)( args[i] ) );
    if( rc ){ printf( "** could not create thread %d\n", i ); exit( -1 ); }
    if( ( i & 3 ) == 0 ) sleep( 1 );
  }

  for( i = 0; i < 20; i++ ){
    rc = pthread_join( threads[i], NULL );
    if( rc ){ printf( "** could not join thread %d\n", i ); exit( -1 ); }
  }

  plock_destroy( priority_lock );

  return 0;
}

